/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {    // 两层递归
public:
    bool isSubTree(TreeNode *tree1, TreeNode *tree2)
    {
        if (tree2 == NULL)    // tree2 is end
            return true;
        if (tree1 == NULL && tree2 != NULL)
            return false;
        if (tree1->val == tree2->val)
        {
            return isSubTree(tree1->left, tree2->left) && isSubTree(tree1->right, tree2->right);
        } else {
            return false;
        }
    }
    
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if (pRoot2 == NULL || pRoot1 == NULL)
            return false;
        if (pRoot1->val == pRoot2->val)
        {
            if (isSubTree(pRoot1->left, pRoot2->left) && isSubTree(pRoot1->right, pRoot2->right))
            {
                return true;
            } else {
                return isSubTree(pRoot1->left, pRoot2) || isSubTree(pRoot1->right, pRoot2);
            }
        }
        return isSubTree(pRoot1->left, pRoot2) || isSubTree(pRoot1->right, pRoot2);
    }
};